/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PushOptions } from "./components/notification/p-notification-handler/p-notification-handler";
export { PushOptions } from "./components/notification/p-notification-handler/p-notification-handler";
export namespace Components {
    interface PAccordion {
        "open": boolean;
        "title": string;
    }
    interface PAlert {
        /**
          * Show close icon
         */
        "closable"?: boolean;
        "dark"?: boolean;
        "type"?: AlertColor;
    }
    interface PBadge {
        "dark"?: boolean;
        "type"?: BadgeColor;
    }
    interface PBreadcrumb {
        "dark"?: boolean;
    }
    interface PBreadcrumbItem {
        "dark"?: boolean;
        "first"?: boolean;
        "link"?: string;
    }
    interface PButton {
        "block"?: boolean;
        "dark"?: boolean;
        "disabled"?: boolean;
        "large"?: boolean;
        "outline"?: boolean;
        "small"?: boolean;
        "type"?: ButtonColor;
    }
    interface PDropdown {
        "dark"?: boolean;
        "placeholder"?: string;
        /**
          * Prevent dropdown self update selected value
         */
        "preventSelected"?: boolean;
        /**
          * Selected item value
         */
        "value"?: string;
    }
    interface PDropdownItem {
        "dark"?: boolean;
        "selected"?: boolean;
        "value": string;
    }
    interface PDropdownPreview {
    }
    interface PIcon {
        "color": string;
        "icon": string;
        "size": number;
    }
    interface PInputText {
        "block"?: boolean;
        "dark"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "label"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface PLeaf {
        "dark"?: boolean;
    }
    interface PModal {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
    }
    interface PModalPreview {
        "title"?: boolean;
    }
    interface PNotification {
        "canclose": boolean;
        "text": string;
        "timestamp": string;
        "type"?: string;
    }
    interface PNotificationHandler {
        "pushNotification": (options: PushOptions) => Promise<void>;
    }
    interface PNotificationPreview {
    }
    interface PProgressBar {
        "auto"?: number;
        "dark"?: boolean;
        "striped"?: boolean;
        "type"?: ProgressBarColor;
        "value"?: number;
    }
    interface PSlider {
        "block"?: boolean;
        "dark"?: boolean;
        "max"?: number;
        "min"?: number;
        "value"?: number;
    }
    interface PSpinner {
        "color"?: string;
        "dark"?: boolean;
        "large": boolean;
    }
    interface PSwitch {
        "checked"?: boolean;
        "dark"?: boolean;
        /**
          * define switch style
         */
        "round"?: boolean;
        /**
          * define switch parent style
         */
        "square"?: boolean;
    }
    interface PSwitchTile {
        "checked"?: boolean;
        "checkedBackground"?: TileBackground;
        /**
          * Enable dark mode
         */
        "dark"?: boolean;
        "uncheckedBackground"?: TileBackground;
    }
    interface PTab {
        "dark"?: boolean;
        "selected"?: boolean;
        "title": string;
    }
    interface PTabs {
        "dark"?: boolean;
    }
    interface PTooltip {
        "bottom"?: boolean;
        "disabled"?: boolean;
        "left"?: boolean;
        "right"?: boolean;
        "title"?: string;
        "top"?: boolean;
    }
}
export interface PAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPAlertElement;
}
export interface PDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDropdownElement;
}
export interface PDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPDropdownItemElement;
}
export interface PInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPInputTextElement;
}
export interface PModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPModalElement;
}
export interface PNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPNotificationElement;
}
export interface PSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPSliderElement;
}
export interface PSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPSwitchElement;
}
export interface PSwitchTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPSwitchTileElement;
}
declare global {
    interface HTMLPAccordionElement extends Components.PAccordion, HTMLStencilElement {
    }
    var HTMLPAccordionElement: {
        prototype: HTMLPAccordionElement;
        new (): HTMLPAccordionElement;
    };
    interface HTMLPAlertElementEventMap {
        "close": any;
    }
    interface HTMLPAlertElement extends Components.PAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPAlertElementEventMap>(type: K, listener: (this: HTMLPAlertElement, ev: PAlertCustomEvent<HTMLPAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPAlertElementEventMap>(type: K, listener: (this: HTMLPAlertElement, ev: PAlertCustomEvent<HTMLPAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPAlertElement: {
        prototype: HTMLPAlertElement;
        new (): HTMLPAlertElement;
    };
    interface HTMLPBadgeElement extends Components.PBadge, HTMLStencilElement {
    }
    var HTMLPBadgeElement: {
        prototype: HTMLPBadgeElement;
        new (): HTMLPBadgeElement;
    };
    interface HTMLPBreadcrumbElement extends Components.PBreadcrumb, HTMLStencilElement {
    }
    var HTMLPBreadcrumbElement: {
        prototype: HTMLPBreadcrumbElement;
        new (): HTMLPBreadcrumbElement;
    };
    interface HTMLPBreadcrumbItemElement extends Components.PBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLPBreadcrumbItemElement: {
        prototype: HTMLPBreadcrumbItemElement;
        new (): HTMLPBreadcrumbItemElement;
    };
    interface HTMLPButtonElement extends Components.PButton, HTMLStencilElement {
    }
    var HTMLPButtonElement: {
        prototype: HTMLPButtonElement;
        new (): HTMLPButtonElement;
    };
    interface HTMLPDropdownElementEventMap {
        "select": string;
    }
    interface HTMLPDropdownElement extends Components.PDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPDropdownElementEventMap>(type: K, listener: (this: HTMLPDropdownElement, ev: PDropdownCustomEvent<HTMLPDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPDropdownElementEventMap>(type: K, listener: (this: HTMLPDropdownElement, ev: PDropdownCustomEvent<HTMLPDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPDropdownElement: {
        prototype: HTMLPDropdownElement;
        new (): HTMLPDropdownElement;
    };
    interface HTMLPDropdownItemElementEventMap {
        "change": string;
    }
    interface HTMLPDropdownItemElement extends Components.PDropdownItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPDropdownItemElementEventMap>(type: K, listener: (this: HTMLPDropdownItemElement, ev: PDropdownItemCustomEvent<HTMLPDropdownItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPDropdownItemElementEventMap>(type: K, listener: (this: HTMLPDropdownItemElement, ev: PDropdownItemCustomEvent<HTMLPDropdownItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPDropdownItemElement: {
        prototype: HTMLPDropdownItemElement;
        new (): HTMLPDropdownItemElement;
    };
    interface HTMLPDropdownPreviewElement extends Components.PDropdownPreview, HTMLStencilElement {
    }
    var HTMLPDropdownPreviewElement: {
        prototype: HTMLPDropdownPreviewElement;
        new (): HTMLPDropdownPreviewElement;
    };
    interface HTMLPIconElement extends Components.PIcon, HTMLStencilElement {
    }
    var HTMLPIconElement: {
        prototype: HTMLPIconElement;
        new (): HTMLPIconElement;
    };
    interface HTMLPInputTextElementEventMap {
        "change": string;
        "input": string;
    }
    interface HTMLPInputTextElement extends Components.PInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPInputTextElementEventMap>(type: K, listener: (this: HTMLPInputTextElement, ev: PInputTextCustomEvent<HTMLPInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPInputTextElementEventMap>(type: K, listener: (this: HTMLPInputTextElement, ev: PInputTextCustomEvent<HTMLPInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPInputTextElement: {
        prototype: HTMLPInputTextElement;
        new (): HTMLPInputTextElement;
    };
    interface HTMLPLeafElement extends Components.PLeaf, HTMLStencilElement {
    }
    var HTMLPLeafElement: {
        prototype: HTMLPLeafElement;
        new (): HTMLPLeafElement;
    };
    interface HTMLPModalElementEventMap {
        "close": void;
    }
    interface HTMLPModalElement extends Components.PModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPModalElementEventMap>(type: K, listener: (this: HTMLPModalElement, ev: PModalCustomEvent<HTMLPModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPModalElementEventMap>(type: K, listener: (this: HTMLPModalElement, ev: PModalCustomEvent<HTMLPModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPModalElement: {
        prototype: HTMLPModalElement;
        new (): HTMLPModalElement;
    };
    interface HTMLPModalPreviewElement extends Components.PModalPreview, HTMLStencilElement {
    }
    var HTMLPModalPreviewElement: {
        prototype: HTMLPModalPreviewElement;
        new (): HTMLPModalPreviewElement;
    };
    interface HTMLPNotificationElementEventMap {
        "close": string;
    }
    interface HTMLPNotificationElement extends Components.PNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPNotificationElementEventMap>(type: K, listener: (this: HTMLPNotificationElement, ev: PNotificationCustomEvent<HTMLPNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPNotificationElementEventMap>(type: K, listener: (this: HTMLPNotificationElement, ev: PNotificationCustomEvent<HTMLPNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPNotificationElement: {
        prototype: HTMLPNotificationElement;
        new (): HTMLPNotificationElement;
    };
    interface HTMLPNotificationHandlerElement extends Components.PNotificationHandler, HTMLStencilElement {
    }
    var HTMLPNotificationHandlerElement: {
        prototype: HTMLPNotificationHandlerElement;
        new (): HTMLPNotificationHandlerElement;
    };
    interface HTMLPNotificationPreviewElement extends Components.PNotificationPreview, HTMLStencilElement {
    }
    var HTMLPNotificationPreviewElement: {
        prototype: HTMLPNotificationPreviewElement;
        new (): HTMLPNotificationPreviewElement;
    };
    interface HTMLPProgressBarElement extends Components.PProgressBar, HTMLStencilElement {
    }
    var HTMLPProgressBarElement: {
        prototype: HTMLPProgressBarElement;
        new (): HTMLPProgressBarElement;
    };
    interface HTMLPSliderElementEventMap {
        "change": number;
    }
    interface HTMLPSliderElement extends Components.PSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPSliderElementEventMap>(type: K, listener: (this: HTMLPSliderElement, ev: PSliderCustomEvent<HTMLPSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPSliderElementEventMap>(type: K, listener: (this: HTMLPSliderElement, ev: PSliderCustomEvent<HTMLPSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPSliderElement: {
        prototype: HTMLPSliderElement;
        new (): HTMLPSliderElement;
    };
    interface HTMLPSpinnerElement extends Components.PSpinner, HTMLStencilElement {
    }
    var HTMLPSpinnerElement: {
        prototype: HTMLPSpinnerElement;
        new (): HTMLPSpinnerElement;
    };
    interface HTMLPSwitchElementEventMap {
        "change": boolean;
    }
    interface HTMLPSwitchElement extends Components.PSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPSwitchElementEventMap>(type: K, listener: (this: HTMLPSwitchElement, ev: PSwitchCustomEvent<HTMLPSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPSwitchElementEventMap>(type: K, listener: (this: HTMLPSwitchElement, ev: PSwitchCustomEvent<HTMLPSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPSwitchElement: {
        prototype: HTMLPSwitchElement;
        new (): HTMLPSwitchElement;
    };
    interface HTMLPSwitchTileElementEventMap {
        "change": boolean;
    }
    interface HTMLPSwitchTileElement extends Components.PSwitchTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPSwitchTileElementEventMap>(type: K, listener: (this: HTMLPSwitchTileElement, ev: PSwitchTileCustomEvent<HTMLPSwitchTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPSwitchTileElementEventMap>(type: K, listener: (this: HTMLPSwitchTileElement, ev: PSwitchTileCustomEvent<HTMLPSwitchTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPSwitchTileElement: {
        prototype: HTMLPSwitchTileElement;
        new (): HTMLPSwitchTileElement;
    };
    interface HTMLPTabElement extends Components.PTab, HTMLStencilElement {
    }
    var HTMLPTabElement: {
        prototype: HTMLPTabElement;
        new (): HTMLPTabElement;
    };
    interface HTMLPTabsElement extends Components.PTabs, HTMLStencilElement {
    }
    var HTMLPTabsElement: {
        prototype: HTMLPTabsElement;
        new (): HTMLPTabsElement;
    };
    interface HTMLPTooltipElement extends Components.PTooltip, HTMLStencilElement {
    }
    var HTMLPTooltipElement: {
        prototype: HTMLPTooltipElement;
        new (): HTMLPTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "p-accordion": HTMLPAccordionElement;
        "p-alert": HTMLPAlertElement;
        "p-badge": HTMLPBadgeElement;
        "p-breadcrumb": HTMLPBreadcrumbElement;
        "p-breadcrumb-item": HTMLPBreadcrumbItemElement;
        "p-button": HTMLPButtonElement;
        "p-dropdown": HTMLPDropdownElement;
        "p-dropdown-item": HTMLPDropdownItemElement;
        "p-dropdown-preview": HTMLPDropdownPreviewElement;
        "p-icon": HTMLPIconElement;
        "p-input-text": HTMLPInputTextElement;
        "p-leaf": HTMLPLeafElement;
        "p-modal": HTMLPModalElement;
        "p-modal-preview": HTMLPModalPreviewElement;
        "p-notification": HTMLPNotificationElement;
        "p-notification-handler": HTMLPNotificationHandlerElement;
        "p-notification-preview": HTMLPNotificationPreviewElement;
        "p-progress-bar": HTMLPProgressBarElement;
        "p-slider": HTMLPSliderElement;
        "p-spinner": HTMLPSpinnerElement;
        "p-switch": HTMLPSwitchElement;
        "p-switch-tile": HTMLPSwitchTileElement;
        "p-tab": HTMLPTabElement;
        "p-tabs": HTMLPTabsElement;
        "p-tooltip": HTMLPTooltipElement;
    }
}
declare namespace LocalJSX {
    interface PAccordion {
        "open"?: boolean;
        "title"?: string;
    }
    interface PAlert {
        /**
          * Show close icon
         */
        "closable"?: boolean;
        "dark"?: boolean;
        "onClose"?: (event: PAlertCustomEvent<any>) => void;
        "type"?: AlertColor;
    }
    interface PBadge {
        "dark"?: boolean;
        "type"?: BadgeColor;
    }
    interface PBreadcrumb {
        "dark"?: boolean;
    }
    interface PBreadcrumbItem {
        "dark"?: boolean;
        "first"?: boolean;
        "link"?: string;
    }
    interface PButton {
        "block"?: boolean;
        "dark"?: boolean;
        "disabled"?: boolean;
        "large"?: boolean;
        "outline"?: boolean;
        "small"?: boolean;
        "type"?: ButtonColor;
    }
    interface PDropdown {
        "dark"?: boolean;
        "onSelect"?: (event: PDropdownCustomEvent<string>) => void;
        "placeholder"?: string;
        /**
          * Prevent dropdown self update selected value
         */
        "preventSelected"?: boolean;
        /**
          * Selected item value
         */
        "value"?: string;
    }
    interface PDropdownItem {
        "dark"?: boolean;
        "onChange"?: (event: PDropdownItemCustomEvent<string>) => void;
        "selected"?: boolean;
        "value": string;
    }
    interface PDropdownPreview {
    }
    interface PIcon {
        "color"?: string;
        "icon"?: string;
        "size"?: number;
    }
    interface PInputText {
        "block"?: boolean;
        "dark"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "label"?: string;
        "onChange"?: (event: PInputTextCustomEvent<string>) => void;
        "onInput"?: (event: PInputTextCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface PLeaf {
        "dark"?: boolean;
    }
    interface PModal {
        "onClose"?: (event: PModalCustomEvent<void>) => void;
    }
    interface PModalPreview {
        "title"?: boolean;
    }
    interface PNotification {
        "canclose"?: boolean;
        "onClose"?: (event: PNotificationCustomEvent<string>) => void;
        "text"?: string;
        "timestamp"?: string;
        "type"?: string;
    }
    interface PNotificationHandler {
    }
    interface PNotificationPreview {
    }
    interface PProgressBar {
        "auto"?: number;
        "dark"?: boolean;
        "striped"?: boolean;
        "type"?: ProgressBarColor;
        "value"?: number;
    }
    interface PSlider {
        "block"?: boolean;
        "dark"?: boolean;
        "max"?: number;
        "min"?: number;
        "onChange"?: (event: PSliderCustomEvent<number>) => void;
        "value"?: number;
    }
    interface PSpinner {
        "color"?: string;
        "dark"?: boolean;
        "large"?: boolean;
    }
    interface PSwitch {
        "checked"?: boolean;
        "dark"?: boolean;
        "onChange"?: (event: PSwitchCustomEvent<boolean>) => void;
        /**
          * define switch style
         */
        "round"?: boolean;
        /**
          * define switch parent style
         */
        "square"?: boolean;
    }
    interface PSwitchTile {
        "checked"?: boolean;
        "checkedBackground"?: TileBackground;
        /**
          * Enable dark mode
         */
        "dark"?: boolean;
        "onChange"?: (event: PSwitchTileCustomEvent<boolean>) => void;
        "uncheckedBackground"?: TileBackground;
    }
    interface PTab {
        "dark"?: boolean;
        "selected"?: boolean;
        "title"?: string;
    }
    interface PTabs {
        "dark"?: boolean;
    }
    interface PTooltip {
        "bottom"?: boolean;
        "disabled"?: boolean;
        "left"?: boolean;
        "right"?: boolean;
        "title"?: string;
        "top"?: boolean;
    }
    interface IntrinsicElements {
        "p-accordion": PAccordion;
        "p-alert": PAlert;
        "p-badge": PBadge;
        "p-breadcrumb": PBreadcrumb;
        "p-breadcrumb-item": PBreadcrumbItem;
        "p-button": PButton;
        "p-dropdown": PDropdown;
        "p-dropdown-item": PDropdownItem;
        "p-dropdown-preview": PDropdownPreview;
        "p-icon": PIcon;
        "p-input-text": PInputText;
        "p-leaf": PLeaf;
        "p-modal": PModal;
        "p-modal-preview": PModalPreview;
        "p-notification": PNotification;
        "p-notification-handler": PNotificationHandler;
        "p-notification-preview": PNotificationPreview;
        "p-progress-bar": PProgressBar;
        "p-slider": PSlider;
        "p-spinner": PSpinner;
        "p-switch": PSwitch;
        "p-switch-tile": PSwitchTile;
        "p-tab": PTab;
        "p-tabs": PTabs;
        "p-tooltip": PTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "p-accordion": LocalJSX.PAccordion & JSXBase.HTMLAttributes<HTMLPAccordionElement>;
            "p-alert": LocalJSX.PAlert & JSXBase.HTMLAttributes<HTMLPAlertElement>;
            "p-badge": LocalJSX.PBadge & JSXBase.HTMLAttributes<HTMLPBadgeElement>;
            "p-breadcrumb": LocalJSX.PBreadcrumb & JSXBase.HTMLAttributes<HTMLPBreadcrumbElement>;
            "p-breadcrumb-item": LocalJSX.PBreadcrumbItem & JSXBase.HTMLAttributes<HTMLPBreadcrumbItemElement>;
            "p-button": LocalJSX.PButton & JSXBase.HTMLAttributes<HTMLPButtonElement>;
            "p-dropdown": LocalJSX.PDropdown & JSXBase.HTMLAttributes<HTMLPDropdownElement>;
            "p-dropdown-item": LocalJSX.PDropdownItem & JSXBase.HTMLAttributes<HTMLPDropdownItemElement>;
            "p-dropdown-preview": LocalJSX.PDropdownPreview & JSXBase.HTMLAttributes<HTMLPDropdownPreviewElement>;
            "p-icon": LocalJSX.PIcon & JSXBase.HTMLAttributes<HTMLPIconElement>;
            "p-input-text": LocalJSX.PInputText & JSXBase.HTMLAttributes<HTMLPInputTextElement>;
            "p-leaf": LocalJSX.PLeaf & JSXBase.HTMLAttributes<HTMLPLeafElement>;
            "p-modal": LocalJSX.PModal & JSXBase.HTMLAttributes<HTMLPModalElement>;
            "p-modal-preview": LocalJSX.PModalPreview & JSXBase.HTMLAttributes<HTMLPModalPreviewElement>;
            "p-notification": LocalJSX.PNotification & JSXBase.HTMLAttributes<HTMLPNotificationElement>;
            "p-notification-handler": LocalJSX.PNotificationHandler & JSXBase.HTMLAttributes<HTMLPNotificationHandlerElement>;
            "p-notification-preview": LocalJSX.PNotificationPreview & JSXBase.HTMLAttributes<HTMLPNotificationPreviewElement>;
            "p-progress-bar": LocalJSX.PProgressBar & JSXBase.HTMLAttributes<HTMLPProgressBarElement>;
            "p-slider": LocalJSX.PSlider & JSXBase.HTMLAttributes<HTMLPSliderElement>;
            "p-spinner": LocalJSX.PSpinner & JSXBase.HTMLAttributes<HTMLPSpinnerElement>;
            "p-switch": LocalJSX.PSwitch & JSXBase.HTMLAttributes<HTMLPSwitchElement>;
            "p-switch-tile": LocalJSX.PSwitchTile & JSXBase.HTMLAttributes<HTMLPSwitchTileElement>;
            "p-tab": LocalJSX.PTab & JSXBase.HTMLAttributes<HTMLPTabElement>;
            "p-tabs": LocalJSX.PTabs & JSXBase.HTMLAttributes<HTMLPTabsElement>;
            "p-tooltip": LocalJSX.PTooltip & JSXBase.HTMLAttributes<HTMLPTooltipElement>;
        }
    }
}
